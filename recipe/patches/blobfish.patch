diff --git a/CMakeLists.txt b/CMakeLists.txt
index f4ec871f56..d86bc18e37 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -981,15 +981,15 @@ else()
 endif()
 
  # change custom.bat/sh
-if (EXISTS "${INSTALL_DIR}/${INSTALL_DIR_SCRIPT}/custom.${SCRIPT_EXT}")
-  file (READ "${INSTALL_DIR}/${INSTALL_DIR_SCRIPT}/custom.${SCRIPT_EXT}" CUSTOM_CONTENT)
-
-  set (CUSTOM_CONTENT "${CUSTOM_CONTENT} ${ADDITIONAL_CUSTOM_CONTENT}")
-
-  file (WRITE "${INSTALL_DIR}/${INSTALL_DIR_SCRIPT}/custom.${SCRIPT_EXT}" "${CUSTOM_CONTENT}")
-else()
+# if (EXISTS "${INSTALL_DIR}/${INSTALL_DIR_SCRIPT}/custom.${SCRIPT_EXT}")
+#   file (READ "${INSTALL_DIR}/${INSTALL_DIR_SCRIPT}/custom.${SCRIPT_EXT}" CUSTOM_CONTENT)
+# 
+#   set (CUSTOM_CONTENT "${CUSTOM_CONTENT} ${ADDITIONAL_CUSTOM_CONTENT}")
+# 
+#   file (WRITE "${INSTALL_DIR}/${INSTALL_DIR_SCRIPT}/custom.${SCRIPT_EXT}" "${CUSTOM_CONTENT}")
+# else()
   OCCT_CONFIGURE_AND_INSTALL ("adm/templates/custom.${SCRIPT_EXT}.main" "custom.${SCRIPT_EXT}" "custom.${SCRIPT_EXT}" "${INSTALL_DIR_SCRIPT}")
-endif()
+# endif()
 
 if (WIN32)
   set (THIRDPARTY_DIR_REPLACE "%THIRDPARTY_DIR%")
diff --git a/src/BRepFill/BRepFill_CompatibleWires.cxx b/src/BRepFill/BRepFill_CompatibleWires.cxx
index b4d2cb8931..0d44b99a4c 100644
--- a/src/BRepFill/BRepFill_CompatibleWires.cxx
+++ b/src/BRepFill/BRepFill_CompatibleWires.cxx
@@ -598,26 +598,18 @@ static void Transform (const Standard_Boolean WithRotation,
   gp_Vec axe1 = Ax1, axe2 = Ax2; 
   if (!axe1.IsParallel(axe2,1.e-4)) {
     gp_Vec Vtrans(Pos1,Pos2),Vsign;
-    Standard_Real alpha,beta,sign=1;
+    Standard_Real alpha,beta;
     alpha = Vtrans.Dot(axe1);
     beta = Vtrans.Dot(axe2);
     if (alpha<-1.e-7) axe1 *=-1;
-    if (beta<1.e-7) axe2 *=-1;
-    alpha = Vtrans.Dot(axe1);
-    beta = Vtrans.Dot(axe2);
+    if (beta<-1.e-7) axe2 *=-1;
     gp_Vec norm2 = axe1 ^ axe2;
-    Vsign.SetLinearForm(Vtrans.Dot(axe1),axe2,-Vtrans.Dot(axe2),axe1);
-    alpha = Vsign.Dot(axe1);
-    beta = Vsign.Dot(axe2);
-    Standard_Boolean pasnul = (Abs(alpha)>1.e-4 && Abs(beta)>1.e-4);
-    if ( alpha*beta>0.0 && pasnul ) sign=-1;
     gp_Ax1 Norm(Pos2,norm2);
     Standard_Real ang = axe1.AngleWithRef(axe2,norm2);
     if (!WithRotation) {
       if (ang>M_PI/2) ang = ang - M_PI;
       if (ang<-M_PI/2) ang = ang + M_PI;
     }
-    ang *= sign;
     Pnew = Pnew.Rotated (Norm,ang);
   }
 }
@@ -1136,11 +1128,14 @@ void BRepFill_CompatibleWires::
     gp_Pnt PPs = Curve.Value(0.1*(U1+9*U2));
     TopTools_ListIteratorOfListOfShape itF(MapVLV(VF)),itL(MapVLV(VL));
     Standard_Integer rang = ideb;
-    while (rang < i) {
+    while (rang < i && itF.More() && itL.More()) {
       itF.Next();
       itL.Next();
       rang++;
     }
+    if (!itF.More() || !itL.More())
+      throw Standard_ConstructionError("BRepFill :: regularize profiles are inconsistent");
+    
     TopoDS_Vertex V1 = TopoDS::Vertex(itF.Value()), V2 = TopoDS::Vertex(itL.Value());
     TopoDS_Edge Esol;
     Standard_Real scalmax=0.;
diff --git a/src/BRepFill/BRepFill_Filling.cxx b/src/BRepFill/BRepFill_Filling.cxx
index 546919e9aa..81abf062c6 100644
--- a/src/BRepFill/BRepFill_Filling.cxx
+++ b/src/BRepFill/BRepFill_Filling.cxx
@@ -104,6 +104,7 @@ static TopoDS_Wire WireFromList(TopTools_ListOfShape& Edges)
   while (!Edges.IsEmpty())
   {
     TopTools_ListIteratorOfListOfShape itl(Edges);
+    bool found = false;
     for (; itl.More(); itl.Next())
     {
       anEdge = TopoDS::Edge(itl.Value());
@@ -126,11 +127,17 @@ static TopoDS_Wire WireFromList(TopTools_ListOfShape& Edges)
           anEdge.Reverse();
           V2 = V3;
         }
+        found = true;
         break;
       }
     }
-    BB.Add(aWire, anEdge);
-    Edges.Remove(itl);
+    if (found)
+    {
+      BB.Add(aWire, anEdge);
+      Edges.Remove(itl);
+    }
+    else
+      break;
   }
 
   aWire.Closed(Standard_True);
@@ -325,13 +332,22 @@ void BRepFill_Filling::AddConstraints( const BRepFill_SequenceOfEdgeFaceAndOrder
       CurFace = SeqOfConstraints(i).myFace;
       CurOrder = SeqOfConstraints(i).myOrder;
       
+      // this silently defaults to C0 with an invalid value, 
+      // where before an exception would be
+      // thrown out of curve constraints. Good, Bad?
+      Standard_Integer orderAdapt = 0;
+      if (CurOrder == GeomAbs_G1)
+        orderAdapt = 1;
+      else if (CurOrder == GeomAbs_G2)
+        orderAdapt = 2;
+      
       if (CurFace.IsNull()) {
 	if (CurOrder == GeomAbs_C0) {
 	  Handle( BRepAdaptor_Curve ) HCurve = new BRepAdaptor_Curve();
 	  HCurve->Initialize( CurEdge );
 	  const Handle(Adaptor3d_Curve)& aHCurve = HCurve; // to avoid ambiguity
 	  Constr = new BRepFill_CurveConstraint(aHCurve,
-						CurOrder,
+						orderAdapt,
 						myNbPtsOnCur,
 						myTol3d );
 	}
@@ -355,7 +371,7 @@ void BRepFill_Filling::AddConstraints( const BRepFill_SequenceOfEdgeFaceAndOrder
 	  Handle (Adaptor3d_CurveOnSurface) HCurvOnSurf = new Adaptor3d_CurveOnSurface( CurvOnSurf );
 	  
 	  Constr = new GeomPlate_CurveConstraint(HCurvOnSurf,
-						 CurOrder,
+						 orderAdapt,
 						 myNbPtsOnCur,
 						 myTol3d,
 						 myTolAng,
@@ -375,7 +391,7 @@ void BRepFill_Filling::AddConstraints( const BRepFill_SequenceOfEdgeFaceAndOrder
 	  Handle (Adaptor3d_CurveOnSurface) HCurvOnSurf = new Adaptor3d_CurveOnSurface( CurvOnSurf );
 
 	  Constr = new BRepFill_CurveConstraint( HCurvOnSurf,
-						 CurOrder,
+						 orderAdapt,
 						 myNbPtsOnCur,
 						 myTol3d,
 						 myTolAng,
@@ -572,6 +588,12 @@ void BRepFill_Filling::Build()
 {
   myBuilder.reset (new GeomPlate_BuildPlateSurface (myDegree, myNbPtsOnCur, myNbIter,
                                                     myTol2d, myTol3d, myTolAng, myTolCurv, myAnisotropie));
+  if (myBoundary.IsEmpty())
+  {
+    myIsDone = Standard_False;
+    return;
+  }
+  
   TopoDS_Edge CurEdge;
   TopoDS_Face CurFace;
   Standard_Integer i, j;
diff --git a/src/BRepLib/BRepLib_MakeEdge.cxx b/src/BRepLib/BRepLib_MakeEdge.cxx
index f1ddbdcefb..d2fe99bac7 100644
--- a/src/BRepLib/BRepLib_MakeEdge.cxx
+++ b/src/BRepLib/BRepLib_MakeEdge.cxx
@@ -916,6 +916,7 @@ void  BRepLib_MakeEdge::Init(const Handle(Geom_Curve)& CC,
   }
   B.Range(E,p1,p2);
   B.Degenerated(E, degenerated);
+  E.Closed(closed);
 
   myError = BRepLib_EdgeDone;
   Done();
diff --git a/src/BRepOffset/BRepOffset_Tool.cxx b/src/BRepOffset/BRepOffset_Tool.cxx
index 97cc14cd26..0f1d4f056f 100644
--- a/src/BRepOffset/BRepOffset_Tool.cxx
+++ b/src/BRepOffset/BRepOffset_Tool.cxx
@@ -1891,7 +1891,8 @@ Standard_Boolean BRepOffset_Tool::TryProject
     TopoDS_Edge CurE     = TopoDS::Edge(it.Value());
     Handle(Geom_Curve) C = BRep_Tool::Curve(CurE,L,f,l);
     if (C.IsNull()) {
-      BRepLib::BuildCurve3d(CurE,BRep_Tool::Tolerance(CurE));
+      if (!BRepLib::BuildCurve3d(CurE,BRep_Tool::Tolerance(CurE)))
+        continue;
       C  = BRep_Tool::Curve(CurE,L,f,l);
     }
     C = new Geom_TrimmedCurve(C,f,l);
diff --git a/src/ChFi3d/ChFi3d_Builder_0.cxx b/src/ChFi3d/ChFi3d_Builder_0.cxx
index 27ea6dd75b..7aaf5fd024 100644
--- a/src/ChFi3d/ChFi3d_Builder_0.cxx
+++ b/src/ChFi3d/ChFi3d_Builder_0.cxx
@@ -3180,6 +3180,7 @@ Standard_Boolean ChFi3d_ComputeCurves(const Handle(Adaptor3d_Surface)&   S1,
       ChFi3d_ProjectPCurv(HC,S1,Pc1,tol3d,tolr1);
       ChFi3d_ProjectPCurv(HC,S2,Pc2,tol3d,tolr2);
       C3d = new Geom_TrimmedCurve(C3d,Udeb,Ufin);
+      tolreached = Min(tolreached,ChFi3d_EvalTolReached(S1,Pc1,S2,Pc2,C3d));
       return Standard_True;
     }
   }
diff --git a/src/ChFiDS/ChFiDS_FilSpine.cxx b/src/ChFiDS/ChFiDS_FilSpine.cxx
index 9506dc44b3..fe7c8140cb 100644
--- a/src/ChFiDS/ChFiDS_FilSpine.cxx
+++ b/src/ChFiDS/ChFiDS_FilSpine.cxx
@@ -63,6 +63,8 @@ void ChFiDS_FilSpine::Reset(const Standard_Boolean AllData)
       Standard_Real spinedeb = FirstParameter();
       Standard_Real spinefin = LastParameter();
 
+      if(parandrad.IsEmpty())
+        throw Standard_DomainError("Radius not defined");
       gp_XY FirstUandR = parandrad.First();
       gp_XY LastUandR  = parandrad.Last();
       if (Abs( spinedeb - FirstUandR.X() ) > gp::Resolution())
diff --git a/src/ElSLib/ElSLib.cxx b/src/ElSLib/ElSLib.cxx
index 86d7f591f5..505d19722b 100644
--- a/src/ElSLib/ElSLib.cxx
+++ b/src/ElSLib/ElSLib.cxx
@@ -170,6 +170,7 @@ gp_Vec ElSLib::ConeDN (const Standard_Real    U,
 {
    gp_XYZ Xdir = Pos.XDirection().XYZ();
    gp_XYZ Ydir = Pos.YDirection().XYZ(); 
+   gp_XYZ ZDir = Pos.Direction ().XYZ();
    Standard_Real Um = U + Nu * M_PI_2;  // M_PI * 0.5
    Xdir.Multiply(cos(Um));
    Ydir.Multiply(sin(Um));
@@ -181,6 +182,8 @@ gp_Vec ElSLib::ConeDN (const Standard_Real    U,
    }
    else if(Nv == 1) { 
      Xdir.Multiply(sin(SAngle));
+     ZDir.Multiply(cos(SAngle));
+     Xdir.Add(ZDir);
      return gp_Vec(Xdir);     
    }
    return gp_Vec(0.0,0.0,0.0);
diff --git a/src/GeomPlate/GeomPlate_BuildAveragePlane.cxx b/src/GeomPlate/GeomPlate_BuildAveragePlane.cxx
index c058110ec1..7b7e9cdeea 100644
--- a/src/GeomPlate/GeomPlate_BuildAveragePlane.cxx
+++ b/src/GeomPlate/GeomPlate_BuildAveragePlane.cxx
@@ -436,7 +436,7 @@ void GeomPlate_BuildAveragePlane::BasePlan(const gp_Vec& OZ)
           || ((Abs(n2)<=myTol)&&(Abs(n3)<=myTol))
           || ((Abs(n1)<=myTol)&&(Abs(n3)<=myTol))) {
       myOX.SetCoord(V3(1),V3(2),V3(3));
-      myOY.SetCoord(0,0,0);
+      myOY = OZ ^ myOX;
     }
     else {
       myOX.SetCoord(V3(1),V3(2),V3(3));
diff --git a/src/MAT/MAT_TList.gxx b/src/MAT/MAT_TList.gxx
index 15d1f03d3f..87f2cabb3c 100644
--- a/src/MAT/MAT_TList.gxx
+++ b/src/MAT/MAT_TList.gxx
@@ -14,6 +14,8 @@
 // Alternatively, this file may be used under the terms of Open CASCADE
 // commercial license or contractual agreement.
 
+#include <Standard_OutOfRange.hxx>
+
 //=======================================================================
 //function : MAT_TList
 //purpose  : 
@@ -107,6 +109,8 @@ Standard_Boolean MAT_TList::More() const
 
 Item MAT_TList::Current() const
 {
+  if (thecurrentnode.IsNull())
+    throw Standard_OutOfRange();
   return thecurrentnode->GetItem();
 }
 
